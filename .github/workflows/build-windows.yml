name: 'build-windows'

on:
  push:
    branches: [ "master", "msvc-master" ]
  pull_request:
    branches: [ "master", "msvc-master" ]

env:
  # Use fixed vcpkg version to ensure build stability
  VCPKG_COMMIT: '6ecbbbdf31cba47aafa7cf6189b1e73e10ac61f8'

jobs:
  build-windows-msvc:
    runs-on: windows-latest
    
    strategy:
      matrix:
        triplet: [x64-windows]
        
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # Step 2: Setup MSVC development environment
      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      # Step 3: Install and setup vcpkg
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}
          vcpkgDirectory: '${{ runner.temp }}/vcpkg'

      # Step 4: Cache vcpkg binary files to speed up builds
      - name: Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/vcpkg/downloads
            ${{ runner.temp }}/vcpkg/installed
          key: vcpkg-${{ matrix.triplet }}-${{ env.VCPKG_COMMIT }}-${{ hashFiles('port/vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ matrix.triplet }}-${{ env.VCPKG_COMMIT }}-
            vcpkg-${{ matrix.triplet }}-

      # Step 5: Install MLT using local source (CI mode)
      - name: Install MLT with all features using local source
        run: |
          $env:VCPKG_MLT_SOURCE_DIR = "${{ github.workspace }}"
          vcpkg install --triplet ${{ matrix.triplet }} --overlay-ports="${{ github.workspace }}/port" mlt[core,avformat,decklink,frei0r,gdk,jackrack,kdenlive,normalize,oldfilm,plus,plusgpl,qt6,resample,rtaudio,rubberband,sdl2,vidstab,vorbis,xine,xml,opencv,glaxnimate-qt6]
        env:
          VCPKG_ROOT: '${{ runner.temp }}/vcpkg'

      # Step 6: Verify installation results
      - name: Verify MLT installation
        run: |
          $VCPKG_ROOT = "${{ runner.temp }}/vcpkg"
          $MLT_DIR = "$VCPKG_ROOT/installed/${{ matrix.triplet }}"
          
          Write-Host "=== Verifying MLT Installation ==="
          
          # Check main files in root directory (outside bin)
          if (Test-Path "$MLT_DIR/mlt-7.dll") {
            Write-Host "✓ mlt-7.dll exists in root"
          } else {
            Write-Host "✗ mlt-7.dll missing in root"
            exit 1
          }
          
          if (Test-Path "$MLT_DIR/mlt++-7.dll") {
            Write-Host "✓ mlt++-7.dll exists in root"
          } else {
            Write-Host "✗ mlt++-7.dll missing in root"
            exit 1
          }
          
          # Check melt.exe in root directory (outside bin)
          if (Test-Path "$MLT_DIR/melt.exe") {
            Write-Host "✓ melt.exe exists in root"
            
            # Set PATH to include bin directory for other DLL dependencies
            $env:PATH = "$MLT_DIR/bin;$MLT_DIR;$env:PATH"
            $env:MLT_REPOSITORY = "$MLT_DIR/lib/mlt"
            $env:MLT_DATA = "$MLT_DIR/share/mlt"
            
            # Test melt tool
            try {
              $output = & "$MLT_DIR/melt.exe" -version 2>&1
              Write-Host "✓ melt.exe executed successfully"
              Write-Host "Version output: $output"
            } catch {
              Write-Host "✗ melt.exe execution failed: $_"
              exit 1
            }
          } else {
            Write-Host "✗ melt.exe missing in root"
            exit 1
          }
          
          Write-Host "=== MLT Installation Verification Complete ==="
          } else {
            Write-Host "✗ melt.exe missing"
            exit 1
          }
          
          

